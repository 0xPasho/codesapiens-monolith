generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OrganizationPlan {
  free
  pro
  max
  custom
}

enum SourceType {
  manual
  github
}

enum ChatStatus {
  active
  archived
  deleted
}

enum Feedback {
  good
  bad
}

enum MessageType {
  user
  assistant
}

enum BillingType {
  question
  file_processed
}

model Chat {
  id          String        @id @default(cuid())
  status      ChatStatus
  userId      String
  projectId   String
  createdAt   DateTime      @default(now()) @map(name: "created_at")
  updatedAt   DateTime      @updatedAt @map(name: "updated_at")
  chatHistory ChatHistory[]
  project     Project       @relation(fields: [projectId], references: [id])
}

model ChatHistory {
  id        String      @id @default(cuid())
  userId    String
  content   String
  chatId    String // Changed from projectId to chatId
  feedback  Feedback?
  type      MessageType
  createdAt DateTime    @default(now()) @map(name: "created_at")
  chat      Chat        @relation(fields: [chatId], references: [id]) // Updated relation
}

model Billing {
  id        String      @id @default(cuid())
  type      BillingType
  userId    String
  projectId String
  createdAt DateTime    @default(now()) @map(name: "created_at")
  project   Project     @relation(fields: [projectId], references: [id])
}

model Organization {
  id   String @id @default(cuid())
  name String
  slug String

  stripeCustomerId       String?          @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?          @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?          @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime?        @map(name: "stripe_current_period_end")
  currentPlan            OrganizationPlan @default(free) @map(name: "current_plan")

  isPersonal          Boolean              @default(false)
  createdAt           DateTime             @default(now()) @map(name: "created_at")
  updatedAt           DateTime             @default(now()) @map(name: "updated_at")
  projects            Project[]
  organizationMembers OrganizationMember[]
  User                User[]
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  organizationId      String?
  defaultOrganization Organization?        @relation(fields: [organizationId], references: [id])
  organizationMembers OrganizationMember[]
}

model Project {
  id             String       @id @default(cuid())
  slug           String       @unique
  desc           String?
  createdAt      DateTime     @default(now()) @map(name: "created_at")
  updatedAt      DateTime     @default(now()) @map(name: "updated_at")
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  sources        Source[]
  chats          Chat[]
  billings       Billing[]
}

model Source {
  id                   String     @id @default(cuid())
  repoOrganizationName String
  sourceType           SourceType
  repoUrl              String
  repoProjectName      String
  repoBranchName       String
  projectId            String
  project              Project    @relation(fields: [projectId], references: [id])
}

enum OrganizationMemberRole {
  owner
  member
}

enum OrganizationMemberStatus {
  active
  pending
  rejected
}

model OrganizationMember {
  userId         String
  organizationId String
  role           OrganizationMemberRole
  addedAt        DateTime                 @default(now()) @map(name: "added_at")
  status         OrganizationMemberStatus @default(pending) @map(name: "status")

  user         User         @relation(fields: [userId], references: [id])
  organization Organization @relation(fields: [organizationId], references: [id])

  @@id([userId, organizationId]) // Composite primary key
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
