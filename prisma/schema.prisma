generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [pgvector(map: "vector")]
}

enum OrganizationPlan {
  free
  pro
  max
  custom
}

enum RepositoryType {
  manual
  github
}

enum ChatStatus {
  active
  archived
  deleted
}

enum Feedback {
  good
  bad
}

enum MessageType {
  user
  assistant
}

enum DocumentStatus {
  deleted
  active
}

enum ProjectVisibility {
  public
  private
}

model Chat {
  id               String             @id @default(cuid())
  status           ChatStatus
  userId           String
  projectId        String
  createdAt        DateTime           @default(now()) @map(name: "created_at")
  updatedAt        DateTime           @updatedAt @map(name: "updated_at")
  chatHistory      ChatHistory[]
  project          Project            @relation(fields: [projectId], references: [id])
  billingQuestions BillingQuestions[]
}

model ChatHistory {
  id        String      @id @default(cuid())
  userId    String
  content   String
  chatId    String
  feedback  Feedback?
  type      MessageType
  createdAt DateTime    @default(now()) @map(name: "created_at")
  chat      Chat        @relation(fields: [chatId], references: [id])
}

model BillingFile {
  id         String   @id @default(cuid())
  userId     String?
  user       User?    @relation(fields: [userId], references: [id])
  projectId  String
  documentId String
  metadata   Json?
  createdAt  DateTime @default(now()) @map(name: "created_at")
  processId  String?
  document   Document @relation(fields: [documentId], references: [id])
  project    Project  @relation(fields: [projectId], references: [id])
  process    Process? @relation(fields: [processId], references: [id])
}

model Organization {
  id   String @id @default(cuid())
  name String
  slug String

  stripeCustomerId       String?              @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?              @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?              @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime?            @map(name: "stripe_current_period_end")
  currentPlanStartedAt   DateTime?
  currentPlan            OrganizationPlan     @default(free) @map(name: "current_plan")
  currentSeats           Int?                 @default(1) 
  planMaxSeats           Int?
  currentQuestions       Int?                 @default(0) 
  planMaxQuestions       Int?
  currentProcessedFiles  Int?                 @default(0) 
  planMaxProcessedFiles  Int?
  isPersonal             Boolean              @default(false)
  createdAt              DateTime             @default(now()) @map(name: "created_at")
  updatedAt              DateTime             @default(now()) @map(name: "updated_at")
  projects               Project[]
  organizationMembers    OrganizationMember[]
  User                   User[]
}

model User {
  id                   String    @id @default(cuid())
  name                 String?
  email                String?   @unique
  emailVerified        DateTime?
  image                String?
  accounts             Account[]
  sessions             Session[]
  githubInstallationId String?

  organizationId      String?
  defaultOrganization Organization?        @relation(fields: [organizationId], references: [id])
  organizationMembers OrganizationMember[]
  billingFiles        BillingFile[]
  billingQuestions    BillingQuestions[]
}

model Project {
  id               String             @id @default(cuid())
  slug             String             @unique
  desc             String?
  visibility       ProjectVisibility   @default(private) @map(name: "visibility")
  createdAt        DateTime           @default(now()) @map(name: "created_at")
  updatedAt        DateTime           @default(now()) @map(name: "updated_at")
  organizationId   String
  organization     Organization       @relation(fields: [organizationId], references: [id])
  repositories     ProjectRepository[]
  documents        Document[]
  chats            Chat[]
  billingFiles     BillingFile[]
  billingQuestions BillingQuestions[]
  syncs            RepositorySync[]
  processes        Process[]
}

model Process {
  id           String    @id @default(cuid())
  startDate    DateTime  @default(now())
  endDate      DateTime?
  logs         String?
  repositoryId String
  projectId    String

  repository   Repository    @relation(fields: [repositoryId], references: [id])
  project      Project       @relation(fields: [projectId], references: [id])
  billingFiles BillingFile[]
}

model DocumentEmbeedingChunk {
  id        String   @id @default(uuid())
  content   String?  // corresponds to Document.pageContent
  metadata  Json     // corresponds to Document.metadata
  embedding Unsupported("vector")?
} 

model Document {
  id               String                 @id @default(cuid())
  title            String
  content          String?
  content_obj      Json?
  status           DocumentStatus
  sync_fail_reason String?
  synced           Boolean
  repositoryId     String
  isFolder         Boolean                @default(false)
  pathName         String?
  latest_sync_date DateTime?
  path             String?
  parentId         String?
  parent           Document?              @relation("DocumentToDocument", fields: [parentId], references: [id])
  children         Document[]             @relation("DocumentToDocument") // This line is now explicit about the relation
  billingFiles     BillingFile[]
  repository       Repository             @relation(fields: [repositoryId], references: [id])
  projectId        String
  project          Project                @relation(fields: [projectId], references: [id])
}

model Repository {
  id                   String           @id @default(cuid())
  repoOrganizationName String?
  title                String?
  repositoryType       RepositoryType
  repoGithubIsPublic   Boolean?   @default(false)
  repoDescription      String?
  repoUrl              String?
  repoProjectName      String?
  repoBranchName       String?
  documents            Document[]
  processes            Process[]
  syncs                RepositorySync[]

  projects            ProjectRepository[]
  isDefault Boolean @default(false)
}

model ProjectRepository {
  projectId    String
  project      Project    @relation(fields: [projectId], references: [id])
  repositoryId String
  repository   Repository @relation(fields: [repositoryId], references: [id])

  @@id([projectId, repositoryId])
}

model RepositorySync {
  id           String     @id @default(cuid())
  repositoryId String
  repository   Repository @relation(fields: [repositoryId], references: [id])
  projectId    String
  project      Project    @relation(fields: [projectId], references: [id])
  created_at   DateTime   @default(now())
  finished_at  DateTime?
  logs         String?
  synced_commit         String?
}

enum OrganizationMemberRole {
  owner
  member
}

enum OrganizationMemberStatus {
  active
  pending
  rejected
}

model OrganizationMember {
  userId         String
  organizationId String
  role           OrganizationMemberRole
  addedAt        DateTime                 @default(now()) @map(name: "added_at")
  status         OrganizationMemberStatus @default(pending) @map(name: "status")

  user         User         @relation(fields: [userId], references: [id])
  organization Organization @relation(fields: [organizationId], references: [id])

  @@id([userId, organizationId]) 
}

model BillingQuestions {
  id         String   @id @default(cuid())
  question   String
  created_at DateTime @default(now())
  projectId  String
  userId     String?
  user       User?    @relation(fields: [userId], references: [id])
  chatId     String
  project    Project  @relation(fields: [projectId], references: [id])
  chat       Chat     @relation(fields: [chatId], references: [id])
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
